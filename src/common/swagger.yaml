swagger: '2.0'
info:
  description: "LINS project REST api"
  version: "1.0"
  title: "LINS backend"
  contact:
    name: "Developer"
    url: "https://github.com/motorny"
    email: "motorny.nikita@gmail.com"

tags:
  - name: "auth"
    description: "Authorization stuff"
  - name: "users"
    description: "Users registration and role management"
  - name: "items"
    description: "Items management"
  - name: "profile"
    description: "Profile, additional user information"
  - name: "storages"
    description: "Storages management"
  - name: "tags"
    description: "Tags creation and stats"
  - name: "comments"
    description: "Comments management"
  - name: "version"
    description: "Backend version info"


schemes:
  - "http"
paths:
  /auth:
    get:
      tags:
        - "auth"
      summary: "Get token info"
      description: "If Bearer token in Authorization header is valid, returns it's info and user's role"
      operationId: "tokenInfo"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        200:
          description: "Success"
          schema:
            type: "object"
            properties:
              isAdmin:
                type: "boolean"
                description: "User's role"
              id:
                type: "integer"
                description: "User's unique id"
                example: 2
              exp:
                type: "integer"
                description: "Token expiration date in Unix epoch format"
                example: 1576102397
        403:
          description: "Not authorized or token not valid"
      security:
        - JWT: []

    post:
      tags:
        - "auth"
      summary: "Acquire token with login and password"
      description: ""
      operationId: "acquireToken"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "credentials"
          description: "Credentials"
          required: true
          schema:
            type: "object"
            properties:
              login:
                type: "string"
                description: "User's login"
                example: "ceo@lins.com"
                minLength: 1

              password:
                type: "string"
                description: "User's password"
                example: "qwerty"
                minLength: 1
            required: ["login", "password"]

      responses:
        200:
          description: "Success"
          schema:
            type: "object"
            properties:
              user_id:
                type: "integer"
                description: "User's unique id"
                example: 2
              token:
                type: "string"
                description: "JWT Token"
                example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwiZXhwIjoxNTc2MTAyMzk3fQ.xi2txb33i1_RW62fyt3C5Wn4zgA_S4FYsUiEZXGOunQ"
        403:
          description: "Not authorized or token not valid"

  /users:
    post:
      tags:
        - "users"
      summary: "Add new user (register)"
      description: "Multiple status values can be provided with comma separated strings"
      operationId: "addUser"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "credentials"
          description: "Credentials"
          required: true
          schema:
            type: "object"
            properties:
              login:
                type: "string"
                description: "User's login"
                example: "ceo@lins.com"
                minLength: 1

              password:
                type: "string"
                description: "User's password"
                example: "qwerty"
                minLength: 1
            required: ["login", "password"]
      responses:
        200:
          description: "Success"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                description: "status string"
                example: "Success"
              id:
                type: "integer"
                description: "User's unique id"
                example: 2
              login:
                type: "string"
                description: "User's login"
                example: "ceo@lins.com"
        400:
          description: "Invalid status value"
        403:
          description: "Not authorized or token not valid"
        409:
          description: "Already exists"

  /users/{userId}:
    patch:
      tags:
        - "users"
      summary: "Change user's role"
      description: "Available only for admins"
      operationId: "changeRole"
      produces:
        - "application/json"
      parameters:
        - name: "userId"
          in: "path"
          description: "ID of user"
          required: true
          type: "integer"
          format: "integer"
        - in: "body"
          name: "body"
          description: "Credentials"
          required: true
          schema:
            type: "object"
            properties:
              isAdmin:
                type: "boolean"
                description: "User's role"
            required: ["isAdmin"]

      responses:
        200:
          description: "Success"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                description: "status string"
                example: "Success"
              id:
                type: "integer"
                description: "User's unique id"
                example: 2
              login:
                type: "string"
                description: "User's login"
                example: "ceo@lins.com"
              isAdmin:
                type: "boolean"
                description: "User's role"
                example: true
        403:
          description: "Not authorized or token not valid"
        404:
          description: "User not found"
      security:
        - JWT: []

  /tags:
    get:
      tags:
        - "tags"
      summary: "Get all tags with stats"
      description: ""
      operationId: "getTag"
      produces:
        - "application/json"
      responses:
        200:
          description: "Success"
          schema:
            type: "object"
            properties:
              totalCnt:
                type: "integer"
                description: "Total count of tags"
                example: 12
              tags:
                type: "array"
                description: "Tag's array"
                items:
                  $ref: "#/definitions/TagStat"

    post:
      tags:
        - "tags"
      summary: "Add new tag"
      description: ""
      operationId: "newTag"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "tagData"
          description: "Tag data"
          required: true
          schema:
            $ref: "#/definitions/Tag"

      responses:
        200:
          description: "Success"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                description: "status string"
                example: "Success"
              id:
                type: "integer"
                description: "Tag's unique id"
                example: 2
              tag:
                type: "string"
                description: "Added tag"
                example: "accessories"
        403:
          description: "Not authorized or token not valid"
        409:
          description: "Tag Already exists"
      security:
        - JWT: []


  /version:
    get:
      tags:
        - "version"
      summary: "Get backend version"
      description: ""
      operationId: "getVersion"
      produces:
        - "application/json"
      responses:
        200:
          description: "Success"
          schema:
            type: "object"
            properties:
              version:
                type: "string"
                description: "Backend version"
                example: "1.0.0"

  /items:
    get:
      tags:
        - "items"
      summary: "Get list of items"
      description: ""
      operationId: "getItems"
      parameters:
        - in: "query"
          name: "offset"
          type: "integer"
          description: "Offset for fetchong data"
          required: false
        - in: "query"
          name: "limit"
          type: "integer"
          description: "Limit of fetched data count"
        - in: "query"
          name: "filter"
          type: "string"
          description: "Filter items by this string in Name and Descripiton fields"
      produces:
        - "application/json"
      responses:
        200:
          description: "Success"
          schema:
            type: "object"
            properties:
              totalCnt:
                type: "integer"
                description: "Total count of itmes"
                example: 12
              tags:
                type: "array"
                description: "Items array"
                items:
                  $ref: "#/definitions/ItemMini"

    post:
      tags:
        - "items"
      summary: "Add new item"
      description: ""
      operationId: "newItem"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "itemData"
          description: "Item data"
          required: true
          schema:
            $ref: "#/definitions/Item"
      responses:
        200:
          description: "Success"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                description: "status string"
                example: "Success"
              id:
                type: "integer"
                description: "Created item's unique id"
                example: 8
              _links:
                type: "object"
                description: "Links object"
                properties:
                  _self:
                    type: "string"
                    description: "Url to get all item's info"
                    example: "http://example.com/media/first.png"
        403:
          description: "Not authorized or token not valid"
      security:
        - JWT: []

  /items/{itemId}:
    get:
      tags:
        - "items"
      summary: "Get item info"
      description: ""
      operationId: "getOneItem"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "itemId"
          in: "path"
          description: "ID of the item"
          required: true
          type: "integer"
          format: "integer"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/ItemFull"
        412:
          description: "Item ID is not valid"

    patch:
      tags:
        - "items"
      summary: "Add new item"
      description: ""
      operationId: "editItem"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "itemId"
          in: "path"
          description: "ID of the item"
          required: true
          type: "integer"
          format: "integer"
        - in: "body"
          name: "itemData"
          description: "Item data"
          required: true
          schema:
            $ref: "#/definitions/Item"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/ItemFull"
        403:
          description: "Not authorized or token not valid"
        412:
          description: "Item ID is not valid"
      security:
        - JWT: []


    delete:
      tags:
        - "items"
      summary: "Delete the item"
      description: ""
      operationId: "deleteItem"
      produces:
        - "application/json"
      parameters:
        - name: "itemId"
          in: "path"
          description: "ID of the item"
          required: true
          type: "integer"
          format: "integer"
      responses:
        200:
          description: "Success"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                description: "status string"
                example: "Success"
        403:
          description: "Not authorized or token not valid"
        412:
          description: "Item ID is not valid"
      security:
        - JWT: []

  /storages:
    get:
      tags:
        - "storages"
      summary: "Get all owner storage by owner_id"
      description: "Available for all"
      operationId: "getAllOwnerStorage"
      produces:
        - "application/json"
      parameters:
        - name: "ownerID"
          in: "query"
          description: "ID of owner"
          required: true
          type: "integer"
          format: "integer"

      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/OwnerStorages"
        400:
          description: "Invalid query parameters: 'owner_id' required"
        412:
          description: "No such user"

    post:
      tags:
        - "storages"
      summary: "Add new storage"
      description: "Avaliable only for admin"
      operationId: "addNewStorage"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "credentials"
          description: "Credentials"
          required: true
          schema:
            $ref: "#/definitions/Storage"
      responses:
        200:
          description: "Success"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                description: "status string"
                example: "Success"
              id:
                type: "integer"
                description: "Storage's unique id"
                example: 1
        400:
          description: "Invalid status value"
        403:
          description: "Not authorized or token not valid"
        409:
          description: "Owner does not exist"
      security:
        - JWT: []


  /storages/{storageID}:
    get:
      tags:
        - "storages"
      summary: "Get storage by id"
      description: "Available for all"
      operationId: "getOneStorage"
      produces:
        - "application/json"
      parameters:
        - name: "storageID"
          in: "path"
          description: "ID of storage"
          required: true
          type: "integer"
          format: "integer"
      responses:
        200:
          description: "Success"
          schema:
            $ref: '#/definitions/Storage'
        404:
          description: "Storage with this id is not existing"

    put:
      tags:
        - "storages"
      summary: "Change storage by id"
      description: "Available for admins only"
      operationId: "changeStorageById"
      produces:
        - "application/json"
      parameters:
        - name: "storageID"
          in: "path"
          description: "ID of storage"
          required: true
          type: "integer"
          format: "integer"
        - in: "body"
          name: "body"
          description: "Credentials"
          required: true
          schema:
            $ref: "#/definitions/Storage"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/Storage"
        412:
          description: "Storage not found"
        403:
          description: "Permission denied"
      security:
        - JWT: []

    delete:
      tags:
        - "storages"
      summary: "Delete storage by id"
      description: "Available for admins only"
      operationId: "deleteStorageById"
      produces:
        - "application/json"
      parameters:
        - name: "storageID"
          in: "path"
          description: "ID of storage"
          required: true
          type: "integer"
          format: "integer"

      responses:
        200:
          description: "Success"
        412:
          description: "Storage not found"
      security:
        - JWT: []


  /profile:
    post:
      tags:
        - "profile"
      summary: "Create new profile"
      description: "Multiple status values can be provided with comma separated strings"
      operationId: "createProfile"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "credentials"
          description: "Credentials"
          required: true
          schema:
            allOf:
              - $ref: "#/definitions/Profile"
              - required: ["username", "role", "location", "contact", "user_id"]
      responses:
        200:
          description: "Success"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                description: "status string"
                example: "SUCCSESS"
        400:
          description: "Invalid status value"
        403:
          description: "Not authorized or token not valid"
      security:
        - JWT: []


  /profile/{profileId}:
    get:
      tags:
        - "profile"
      summary: "Get profile info"
      description: "Get profile info"
      operationId: "getProfile"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "profileId"
          in: "path"
          description: "ID of profile"
          required: true
          type: "integer"
          format: "integer"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/Profile"
        400:
          description: "Invalid status value"

    put:
      tags:
        - "profile"
      summary: "Update existing profile"
      description: "Multiple status values can be provided with comma separated strings"
      operationId: "updateProfile"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "profileId"
          in: "path"
          description: "ID of profile"
          required: true
          type: "integer"
          format: "integer"
        - in: "body"
          name: "credentials"
          description: "Credentials"
          required: true
          schema:
            $ref: "#/definitions/Profile"
      responses:
        200:
          description: "Success"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                description: "status string"
                example: "Success"
        400:
          description: "Invalid status value"
        403:
          description: "Not authorized or token not valid"
      security:
        - JWT: []


    delete:
      tags:
        - "profile"
      summary: "Delete profile"
      description: "Delete profile"
      operationId: "deleteProfile"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "profileId"
          in: "path"
          description: "ID of profile"
          required: true
          type: "integer"
          format: "integer"
      responses:
        200:
          description: "Success"
        400:
          description: "Invalid status value"
      security:
        - JWT: []


securityDefinitions:
  JWT:
    type: apiKey
    in: header
    name: Authorization

definitions:
  Tag:
    type: "object"
    properties:
      tag:
        type: "string"
        description: "Tag string"
        example: "accessories"
    required: ["tag"]
  TagStat:
    type: "object"
    properties:
      tag:
        type: "string"
        description: "Tag string"
        example: "accessories"
      id:
        type: "integer"
        description: "Tag's unique id"
        example: 2
      itemsCnt:
        type: "integer"
        description: "Count of items, which has this tag assigned"
        example: 23
  Item:
    type: "object"
    properties:
      name:
        title: "Name"
        type: "string"
        description: "Item name"
        example: "HDMI connector"
        minLength: 1
      image:
        title: "Item's image"
        description: "base64 encoded image"
        type: "string"
      description:
        title: "Description"
        type: "string"
        description: "Full description for the item"
        example: "The best item ever"
      storage_id:
        title: "Storage id"
        type: "integer"
        description: "Id of the storage the item will be assigned to. If not passed, the item will be assigned to the default user's storage"
      tag_ids:
        title: "Tags id"
        type: "array"
        items:
          type: "integer"
        description: "Ids of the Tags for this item"
  ItemMini:
    type: "object"
    properties:
      id:
        title: "Id"
        description: "Item id"
        example: 3
        type: "integer"
      name:
        title: "Name"
        type: "string"
        description: "Item name"
        example: "HDMI connector"
      image_url:
        title: "Item's image"
        description: "URL to fetch an image"
        type: "string"
      description:
        title: "Description"
        type: "string"
        description: "Full description for the item"
        example: "The best item ever"
      location:
        title: "Status"
        description: "Item's location"
        type: "string"
        example: "some storage"
      status:
        title: "Status"
        description: "Item status"
        type: "string"
        example: "free"
      owner:
        type: "object"
        description: "Owner object"
        properties:
          id:
            title: "Id"
            description: "Owner id"
            type: "integer"
            example: 90
          username:
            title: "Name"
            description: "User's name"
            type: "string"
            example: "Petr"
          image_url:
            title: "User's image"
            description: "URL to fetch an image"
            type: "string"
            example: "http://example.com/media/first.png"
      _links:
        type: "object"
        description: "Links object"
        properties:
          _self:
            type: "string"
            description: "Url to get all item's info"
            example: "http://example.com/media/first.png"

  ItemFull:
    type: "object"
    properties:
      id:
        title: "Id"
        description: "Item id"
        example: 3
        type: "integer"
      name:
        title: "Name"
        type: "string"
        description: "Item name"
        example: "HDMI connector"
      image_url:
        title: "Item's image"
        description: "URL to fetch an image"
        type: "string"
      description:
        title: "Description"
        type: "string"
        description: "Full description for the item"
        example: "The best item ever"
      location:
        title: "Status"
        description: "Item's location"
        type: "string"
        example: "some storage"
      status:
        title: "Status"
        description: "Item status"
        type: "string"
        example: "free"
      createdAt:
        title: "CDate"
        description: "Item creation date"
        type: "string"
        example: "2019-12-03T19:30:22.456Z"
      updatedAt:
        title: "MDate"
        description: "Item modification date"
        type: "string"
        example: "2019-12-03T19:30:22.456Z"
      owner:
        type: "object"
        description: "Owner object"
        properties:
          id:
            title: "Id"
            description: "Owner id"
            type: "integer"
            example: 90
          username:
            title: "Name"
            description: "User's name"
            type: "string"
            example: "Petr"
          image_url:
            title: "User's image"
            description: "URL to fetch an image"
            type: "string"
            example: "http://example.com/media/first.png"
          contact:
            title: "Contact"
            description: "User's conatct"
            type: "string"
            example: "mail@mail.ru"
          points:
            title: "Points"
            description: "User's point amount"
            type: "integer"
            example: 509
      tags:
        type: "array"
        description: "Tag's array"
        items:
          description: "Success"
          type: "object"
          properties:
            message:
              type: "string"
              description: "status string"
              example: "Success"
            id:
              type: "integer"
              description: "Tag's unique id"
              example: 2
            tag:
              type: "string"
              description: "Added tag"
              example: "accessories"

      storage:
        type: "object"
        description: "Storage object"
        properties:
          id:
            title: "Id"
            description: "Storage id"
            type: "integer"
            example: 31
          name:
            title: "Name"
            description: "Storage name"
            type: "string"
            example: "Some private locker"
      _links:
        type: "object"
        description: "Links object"
        properties:
          _self:
            type: "string"
            description: "Url to get all item's info"
            example: "http://example.com/media/first.png"
          _owner_profile:
            type: "string"
            description: "Url to get all proflie's info"
            example: "http://example.com/profiles/2"


  Storage:
    type: "object"
    properties:
      name:
        type: "string"
        title: "Storage name"
        description: "Storage name"
        example: "First storage"
        minLength: 1
      location:
        type: "string"
        title: "Storage location"
        description: "Location of storage"
        example: "My location is here"
        minLength: 1
      description:
        type: "string"
        title: "Storage description"
        description: "Full description of the storage"
        example: "This is the first storage"
        minLength: 1
      owner_id:
        type: "integer"
        title: "Owner id of storage"
        description: "Id of the owner"
        example: 1
        minLength: 1
    required: ["name", "location", "owner_id"]

  OwnerStorages:
    type: "object"
    properties:
      page:
        type: "integer"
        description: 'Number of page of storages'
      owner:
        type: "integer"
        description: "OwnerID"
      totalCnt:
        type: "integer"
        description: "Amount of owned storage"
      storages:
        type: "array"
        items:
          $ref: '#/definitions/Storage'


  Profile:
    type: "object"
    properties:
      username:
        type: "string"
        description: "Unique username"
        example: "ItemGiver"
        minLength: 1

      image_url:
        type: "string"
        description: "Avatar (base64Encoded)"
        example: "???"

      location:
        type: "string"
        description: "User's location"
        example: "3rd room"

      role:
        type: "string"
        description: "isAdmin?"
        example: "user"

      contact:
        type: "string"
        description: "Phone, e-mail etc"
        example: "+7(921)582-54-21"

      points:
        type: "number"
        description: "some form of bonus program"
        example: 1


externalDocs:
  description: "Visit Github page and explore sourcecode"
  url: "https://github.com/motorny/lins-backend"